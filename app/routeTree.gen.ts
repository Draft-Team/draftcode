/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as SolutionsImport } from "./routes/solutions"
import { Route as SignupImport } from "./routes/signup"
import { Route as LoginImport } from "./routes/login"
import { Route as ChallengesImport } from "./routes/challenges"
import { Route as IndexImport } from "./routes/index"

// Create/Update Routes

const SolutionsRoute = SolutionsImport.update({
  id: "/solutions",
  path: "/solutions",
  getParentRoute: () => rootRoute,
} as any)

const SignupRoute = SignupImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any)

const ChallengesRoute = ChallengesImport.update({
  id: "/challenges",
  path: "/challenges",
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/challenges": {
      id: "/challenges"
      path: "/challenges"
      fullPath: "/challenges"
      preLoaderRoute: typeof ChallengesImport
      parentRoute: typeof rootRoute
    }
    "/login": {
      id: "/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    "/signup": {
      id: "/signup"
      path: "/signup"
      fullPath: "/signup"
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    "/solutions": {
      id: "/solutions"
      path: "/solutions"
      fullPath: "/solutions"
      preLoaderRoute: typeof SolutionsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/challenges": typeof ChallengesRoute
  "/login": typeof LoginRoute
  "/signup": typeof SignupRoute
  "/solutions": typeof SolutionsRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/challenges": typeof ChallengesRoute
  "/login": typeof LoginRoute
  "/signup": typeof SignupRoute
  "/solutions": typeof SolutionsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/challenges": typeof ChallengesRoute
  "/login": typeof LoginRoute
  "/signup": typeof SignupRoute
  "/solutions": typeof SolutionsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/challenges" | "/login" | "/signup" | "/solutions"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/challenges" | "/login" | "/signup" | "/solutions"
  id: "__root__" | "/" | "/challenges" | "/login" | "/signup" | "/solutions"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChallengesRoute: typeof ChallengesRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  SolutionsRoute: typeof SolutionsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChallengesRoute: ChallengesRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  SolutionsRoute: SolutionsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/challenges",
        "/login",
        "/signup",
        "/solutions"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/challenges": {
      "filePath": "challenges.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/solutions": {
      "filePath": "solutions.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
